/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as MapsRouteImport } from './routes/maps'
import { Route as FlagsRouteImport } from './routes/flags'
import { Route as IndexRouteImport } from './routes/index'

const MapsRoute = MapsRouteImport.update({
  id: '/maps',
  path: '/maps',
  getParentRoute: () => rootRouteImport,
} as any)
const FlagsRoute = FlagsRouteImport.update({
  id: '/flags',
  path: '/flags',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/flags': typeof FlagsRoute
  '/maps': typeof MapsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/flags': typeof FlagsRoute
  '/maps': typeof MapsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/flags': typeof FlagsRoute
  '/maps': typeof MapsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/flags' | '/maps'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/flags' | '/maps'
  id: '__root__' | '/' | '/flags' | '/maps'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FlagsRoute: typeof FlagsRoute
  MapsRoute: typeof MapsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/maps': {
      id: '/maps'
      path: '/maps'
      fullPath: '/maps'
      preLoaderRoute: typeof MapsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/flags': {
      id: '/flags'
      path: '/flags'
      fullPath: '/flags'
      preLoaderRoute: typeof FlagsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FlagsRoute: FlagsRoute,
  MapsRoute: MapsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
